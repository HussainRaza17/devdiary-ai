{"ast":null,"code":"// Enhanced API service with local storage and advanced AI suggestions\n// Replace this with actual API calls using axios when you have a backend\n\nconst STORAGE_KEY = 'devdiary_logs';\n\n// Enhanced AI suggestion generator with more sophisticated analysis\nconst generateAISuggestions = (task, category, priority, previousLogs = []) => {\n  const taskLower = task.toLowerCase();\n  const suggestions = [];\n\n  // Context-aware suggestions based on previous logs\n  const recentTasks = previousLogs.slice(0, 5).map(log => log.task.toLowerCase());\n  const frequentCategories = previousLogs.reduce((acc, log) => {\n    acc[log.category] = (acc[log.category] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Pattern recognition for recurring issues\n  const hasRecentSimilarTask = recentTasks.some(t => t.includes(taskLower.slice(0, 10)) || taskLower.includes(t.slice(0, 10)));\n  if (hasRecentSimilarTask) {\n    suggestions.push({\n      type: 'insight',\n      title: 'Pattern Detected',\n      content: 'You\\'ve worked on similar tasks recently. Consider creating a checklist or template to streamline this work.',\n      priority: 'high'\n    });\n  }\n\n  // Category-specific suggestions\n  if (taskLower.includes('debug') || taskLower.includes('bug') || taskLower.includes('error') || category === 'debugging') {\n    suggestions.push({\n      type: 'tool',\n      title: 'Advanced Debugging',\n      content: 'Use browser DevTools Sources tab for breakpoints, or try VS Code\\'s integrated debugger for better inspection.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Debugging Methodology',\n      content: 'Follow the scientific method: hypothesize, test, observe, repeat. Document your findings.',\n      priority: 'high'\n    });\n    if (taskLower.includes('frontend') || taskLower.includes('ui')) {\n      suggestions.push({\n        type: 'tool',\n        title: 'Frontend Debugging',\n        content: 'Try React Developer Tools profiler or Vue.js devtools for component-specific issues.',\n        priority: 'medium'\n      });\n    }\n  }\n  if (taskLower.includes('test') || taskLower.includes('testing') || category === 'testing') {\n    suggestions.push({\n      type: 'tool',\n      title: 'Testing Strategy',\n      content: 'Consider the testing pyramid: more unit tests, fewer integration tests, minimal e2e tests.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Test-Driven Development',\n      content: 'Write failing tests first, then implement code to make them pass for better design.',\n      priority: 'medium'\n    });\n    if (taskLower.includes('api') || taskLower.includes('backend')) {\n      suggestions.push({\n        type: 'tool',\n        title: 'API Testing',\n        content: 'Use Postman collections or Newman for automated API testing in CI/CD pipelines.',\n        priority: 'medium'\n      });\n    }\n  }\n  if (taskLower.includes('performance') || taskLower.includes('optimize') || taskLower.includes('slow')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'Performance Analysis',\n      content: 'Use Chrome DevTools Performance tab and Lighthouse CI for comprehensive performance auditing.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Performance Budget',\n      content: 'Set performance budgets: <3s load time, <100ms response time, <50KB critical resources.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'insight',\n      title: 'Optimization Priority',\n      content: 'Focus on Core Web Vitals: LCP, FID, and CLS for user experience improvements.',\n      priority: 'medium'\n    });\n  }\n  if (taskLower.includes('api') || taskLower.includes('backend') || taskLower.includes('server')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'API Development',\n      content: 'Implement OpenAPI/Swagger for documentation and use tools like Insomnia or Thunder Client.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'API Security',\n      content: 'Implement rate limiting, input validation, authentication, and CORS properly.',\n      priority: 'high'\n    });\n  }\n  if (taskLower.includes('react') || taskLower.includes('component') || taskLower.includes('jsx')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'React Development',\n      content: 'Use React DevTools Profiler and consider React.memo, useMemo, and useCallback for optimization.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'React Best Practices',\n      content: 'Follow the single responsibility principle and keep components under 200 lines.',\n      priority: 'medium'\n    });\n  }\n  if (taskLower.includes('css') || taskLower.includes('style') || taskLower.includes('design')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'CSS Development',\n      content: 'Use CSS custom properties for themes and consider CSS Grid with Flexbox for robust layouts.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Design System',\n      content: 'Create a consistent spacing scale (4px base) and color palette for better design consistency.',\n      priority: 'medium'\n    });\n  }\n  if (taskLower.includes('database') || taskLower.includes('sql') || taskLower.includes('query')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'Database Optimization',\n      content: 'Use EXPLAIN ANALYZE for query optimization and consider indexing frequently queried columns.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Database Design',\n      content: 'Normalize to 3NF for consistency, denormalize carefully for performance where needed.',\n      priority: 'medium'\n    });\n  }\n\n  // Priority-based suggestions\n  if (priority === 'high') {\n    suggestions.push({\n      type: 'insight',\n      title: 'High Priority Task',\n      content: 'Break this into smaller subtasks and tackle the riskiest parts first. Consider pair programming.',\n      priority: 'high'\n    });\n  }\n\n  // Time-based suggestions\n  const currentHour = new Date().getHours();\n  if (currentHour >= 18 || currentHour <= 6) {\n    suggestions.push({\n      type: 'tip',\n      title: 'Late Work Session',\n      content: 'Take regular breaks and ensure good lighting. Consider tackling easier tasks when tired.',\n      priority: 'medium'\n    });\n  }\n\n  // Frequency-based suggestions\n  const mostFrequentCategory = Object.keys(frequentCategories).reduce((a, b) => frequentCategories[a] > frequentCategories[b] ? a : b, 'development');\n  if (category !== mostFrequentCategory && frequentCategories[mostFrequentCategory] > 3) {\n    suggestions.push({\n      type: 'insight',\n      title: 'Category Shift',\n      content: `You usually work on ${mostFrequentCategory}. This change in focus might benefit from extra planning.`,\n      priority: 'low'\n    });\n  }\n\n  // Default suggestions if no specific keywords found\n  if (suggestions.length === 0) {\n    suggestions.push({\n      type: 'tip',\n      title: 'General Productivity',\n      content: 'Use the Pomodoro Technique: 25 minutes focused work, 5 minute break for sustained productivity.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tool',\n      title: 'Code Quality',\n      content: 'Set up ESLint, Prettier, and Husky pre-commit hooks for consistent code quality.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'insight',\n      title: 'Documentation',\n      content: 'Document your decisions and code. Your future self will thank you.',\n      priority: 'low'\n    });\n  }\n\n  // Limit suggestions to avoid overwhelming\n  return suggestions.slice(0, 4);\n};\n\n// Local storage utilities\nconst saveToStorage = logs => {\n  try {\n    const data = {\n      logs,\n      lastUpdated: new Date().toISOString(),\n      version: '2.0'\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.warn('Failed to save to localStorage:', error);\n  }\n};\nconst loadFromStorage = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (data) {\n      const parsed = JSON.parse(data);\n      return parsed.logs || [];\n    }\n  } catch (error) {\n    console.warn('Failed to load from localStorage:', error);\n  }\n  return [];\n};\n\n// Enhanced API functions\nexport const submitLog = async logData => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1200));\n  const existingLogs = loadFromStorage();\n\n  // Generate enhanced AI suggestions\n  const suggestions = generateAISuggestions(logData.task, logData.category, logData.priority, existingLogs);\n  const newLog = {\n    id: Date.now(),\n    ...logData,\n    suggestions,\n    timestamp: new Date().toISOString(),\n    completed: false,\n    timeSpent: logData.timeSpent || null,\n    tags: logData.tags || []\n  };\n  const updatedLogs = [newLog, ...existingLogs];\n  saveToStorage(updatedLogs);\n  return newLog;\n};\nexport const getLogs = async () => {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return loadFromStorage();\n};\nexport const updateLog = async (logId, updates) => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const logs = loadFromStorage();\n  const updatedLogs = logs.map(log => log.id === logId ? {\n    ...log,\n    ...updates\n  } : log);\n  saveToStorage(updatedLogs);\n  return updatedLogs.find(log => log.id === logId);\n};\nexport const deleteLog = async logId => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const logs = loadFromStorage();\n  const filteredLogs = logs.filter(log => log.id !== logId);\n  saveToStorage(filteredLogs);\n  return filteredLogs;\n};\nexport const getAnalytics = async () => {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  const logs = loadFromStorage();\n  if (logs.length === 0) {\n    return {\n      totalTasks: 0,\n      completedTasks: 0,\n      averageTasksPerDay: 0,\n      productivityTrend: [],\n      categoryDistribution: {},\n      priorityDistribution: {},\n      suggestions: []\n    };\n  }\n  const now = new Date();\n  const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n  const recentLogs = logs.filter(log => new Date(log.timestamp) >= thirtyDaysAgo);\n  const completedTasks = logs.filter(log => log.completed).length;\n  const categoryDistribution = logs.reduce((acc, log) => {\n    acc[log.category] = (acc[log.category] || 0) + 1;\n    return acc;\n  }, {});\n  const priorityDistribution = logs.reduce((acc, log) => {\n    acc[log.priority] = (acc[log.priority] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Generate productivity insights\n  const insights = [];\n  const highPriorityCompleted = logs.filter(log => log.priority === 'high' && log.completed).length;\n  const highPriorityTotal = logs.filter(log => log.priority === 'high').length;\n  if (highPriorityTotal > 0) {\n    const completion = highPriorityCompleted / highPriorityTotal * 100;\n    insights.push({\n      type: completion > 70 ? 'success' : 'warning',\n      title: 'High Priority Completion',\n      content: `You've completed ${completion.toFixed(1)}% of high-priority tasks.`,\n      priority: 'high'\n    });\n  }\n  return {\n    totalTasks: logs.length,\n    completedTasks,\n    averageTasksPerDay: recentLogs.length / 30,\n    categoryDistribution,\n    priorityDistribution,\n    insights,\n    recentActivity: recentLogs.length\n  };\n};\n\n// Export/Import functionality\nexport const exportData = () => {\n  const data = {\n    logs: loadFromStorage(),\n    exportDate: new Date().toISOString(),\n    version: '2.0'\n  };\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n    type: 'application/json'\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `devdiary-export-${new Date().toISOString().split('T')[0]}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\nexport const importData = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = JSON.parse(e.target.result);\n        if (data.logs && Array.isArray(data.logs)) {\n          saveToStorage(data.logs);\n          resolve(data.logs);\n        } else {\n          reject(new Error('Invalid file format'));\n        }\n      } catch (error) {\n        reject(new Error('Failed to parse file'));\n      }\n    };\n    reader.readAsText(file);\n  });\n};","map":{"version":3,"names":["STORAGE_KEY","generateAISuggestions","task","category","priority","previousLogs","taskLower","toLowerCase","suggestions","recentTasks","slice","map","log","frequentCategories","reduce","acc","hasRecentSimilarTask","some","t","includes","push","type","title","content","currentHour","Date","getHours","mostFrequentCategory","Object","keys","a","b","length","saveToStorage","logs","data","lastUpdated","toISOString","version","localStorage","setItem","JSON","stringify","error","console","warn","loadFromStorage","getItem","parsed","parse","submitLog","logData","Promise","resolve","setTimeout","existingLogs","newLog","id","now","timestamp","completed","timeSpent","tags","updatedLogs","getLogs","updateLog","logId","updates","find","deleteLog","filteredLogs","filter","getAnalytics","totalTasks","completedTasks","averageTasksPerDay","productivityTrend","categoryDistribution","priorityDistribution","thirtyDaysAgo","getTime","recentLogs","insights","highPriorityCompleted","highPriorityTotal","completion","toFixed","recentActivity","exportData","exportDate","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","importData","file","reject","reader","FileReader","onload","e","target","result","Array","isArray","Error","readAsText"],"sources":["C:/Users/Hussain Raza/Downloads/reactapp-main/src/services/api.js"],"sourcesContent":["// Enhanced API service with local storage and advanced AI suggestions\n// Replace this with actual API calls using axios when you have a backend\n\nconst STORAGE_KEY = 'devdiary_logs';\n\n// Enhanced AI suggestion generator with more sophisticated analysis\nconst generateAISuggestions = (task, category, priority, previousLogs = []) => {\n  const taskLower = task.toLowerCase();\n  const suggestions = [];\n  \n  // Context-aware suggestions based on previous logs\n  const recentTasks = previousLogs.slice(0, 5).map(log => log.task.toLowerCase());\n  const frequentCategories = previousLogs.reduce((acc, log) => {\n    acc[log.category] = (acc[log.category] || 0) + 1;\n    return acc;\n  }, {});\n  \n  // Pattern recognition for recurring issues\n  const hasRecentSimilarTask = recentTasks.some(t => \n    t.includes(taskLower.slice(0, 10)) || taskLower.includes(t.slice(0, 10))\n  );\n  \n  if (hasRecentSimilarTask) {\n    suggestions.push({\n      type: 'insight',\n      title: 'Pattern Detected',\n      content: 'You\\'ve worked on similar tasks recently. Consider creating a checklist or template to streamline this work.',\n      priority: 'high'\n    });\n  }\n  \n  // Category-specific suggestions\n  if (taskLower.includes('debug') || taskLower.includes('bug') || taskLower.includes('error') || category === 'debugging') {\n    suggestions.push({\n      type: 'tool',\n      title: 'Advanced Debugging',\n      content: 'Use browser DevTools Sources tab for breakpoints, or try VS Code\\'s integrated debugger for better inspection.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Debugging Methodology',\n      content: 'Follow the scientific method: hypothesize, test, observe, repeat. Document your findings.',\n      priority: 'high'\n    });\n    \n    if (taskLower.includes('frontend') || taskLower.includes('ui')) {\n      suggestions.push({\n        type: 'tool',\n        title: 'Frontend Debugging',\n        content: 'Try React Developer Tools profiler or Vue.js devtools for component-specific issues.',\n        priority: 'medium'\n      });\n    }\n  }\n  \n  if (taskLower.includes('test') || taskLower.includes('testing') || category === 'testing') {\n    suggestions.push({\n      type: 'tool',\n      title: 'Testing Strategy',\n      content: 'Consider the testing pyramid: more unit tests, fewer integration tests, minimal e2e tests.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Test-Driven Development',\n      content: 'Write failing tests first, then implement code to make them pass for better design.',\n      priority: 'medium'\n    });\n    \n    if (taskLower.includes('api') || taskLower.includes('backend')) {\n      suggestions.push({\n        type: 'tool',\n        title: 'API Testing',\n        content: 'Use Postman collections or Newman for automated API testing in CI/CD pipelines.',\n        priority: 'medium'\n      });\n    }\n  }\n  \n  if (taskLower.includes('performance') || taskLower.includes('optimize') || taskLower.includes('slow')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'Performance Analysis',\n      content: 'Use Chrome DevTools Performance tab and Lighthouse CI for comprehensive performance auditing.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Performance Budget',\n      content: 'Set performance budgets: <3s load time, <100ms response time, <50KB critical resources.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'insight',\n      title: 'Optimization Priority',\n      content: 'Focus on Core Web Vitals: LCP, FID, and CLS for user experience improvements.',\n      priority: 'medium'\n    });\n  }\n  \n  if (taskLower.includes('api') || taskLower.includes('backend') || taskLower.includes('server')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'API Development',\n      content: 'Implement OpenAPI/Swagger for documentation and use tools like Insomnia or Thunder Client.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'API Security',\n      content: 'Implement rate limiting, input validation, authentication, and CORS properly.',\n      priority: 'high'\n    });\n  }\n  \n  if (taskLower.includes('react') || taskLower.includes('component') || taskLower.includes('jsx')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'React Development',\n      content: 'Use React DevTools Profiler and consider React.memo, useMemo, and useCallback for optimization.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'React Best Practices',\n      content: 'Follow the single responsibility principle and keep components under 200 lines.',\n      priority: 'medium'\n    });\n  }\n  \n  if (taskLower.includes('css') || taskLower.includes('style') || taskLower.includes('design')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'CSS Development',\n      content: 'Use CSS custom properties for themes and consider CSS Grid with Flexbox for robust layouts.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Design System',\n      content: 'Create a consistent spacing scale (4px base) and color palette for better design consistency.',\n      priority: 'medium'\n    });\n  }\n  \n  if (taskLower.includes('database') || taskLower.includes('sql') || taskLower.includes('query')) {\n    suggestions.push({\n      type: 'tool',\n      title: 'Database Optimization',\n      content: 'Use EXPLAIN ANALYZE for query optimization and consider indexing frequently queried columns.',\n      priority: 'high'\n    });\n    suggestions.push({\n      type: 'tip',\n      title: 'Database Design',\n      content: 'Normalize to 3NF for consistency, denormalize carefully for performance where needed.',\n      priority: 'medium'\n    });\n  }\n  \n  // Priority-based suggestions\n  if (priority === 'high') {\n    suggestions.push({\n      type: 'insight',\n      title: 'High Priority Task',\n      content: 'Break this into smaller subtasks and tackle the riskiest parts first. Consider pair programming.',\n      priority: 'high'\n    });\n  }\n  \n  // Time-based suggestions\n  const currentHour = new Date().getHours();\n  if (currentHour >= 18 || currentHour <= 6) {\n    suggestions.push({\n      type: 'tip',\n      title: 'Late Work Session',\n      content: 'Take regular breaks and ensure good lighting. Consider tackling easier tasks when tired.',\n      priority: 'medium'\n    });\n  }\n  \n  // Frequency-based suggestions\n  const mostFrequentCategory = Object.keys(frequentCategories).reduce((a, b) => \n    frequentCategories[a] > frequentCategories[b] ? a : b, 'development'\n  );\n  \n  if (category !== mostFrequentCategory && frequentCategories[mostFrequentCategory] > 3) {\n    suggestions.push({\n      type: 'insight',\n      title: 'Category Shift',\n      content: `You usually work on ${mostFrequentCategory}. This change in focus might benefit from extra planning.`,\n      priority: 'low'\n    });\n  }\n  \n  // Default suggestions if no specific keywords found\n  if (suggestions.length === 0) {\n    suggestions.push({\n      type: 'tip',\n      title: 'General Productivity',\n      content: 'Use the Pomodoro Technique: 25 minutes focused work, 5 minute break for sustained productivity.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'tool',\n      title: 'Code Quality',\n      content: 'Set up ESLint, Prettier, and Husky pre-commit hooks for consistent code quality.',\n      priority: 'medium'\n    });\n    suggestions.push({\n      type: 'insight',\n      title: 'Documentation',\n      content: 'Document your decisions and code. Your future self will thank you.',\n      priority: 'low'\n    });\n  }\n  \n  // Limit suggestions to avoid overwhelming\n  return suggestions.slice(0, 4);\n};\n\n// Local storage utilities\nconst saveToStorage = (logs) => {\n  try {\n    const data = {\n      logs,\n      lastUpdated: new Date().toISOString(),\n      version: '2.0'\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.warn('Failed to save to localStorage:', error);\n  }\n};\n\nconst loadFromStorage = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (data) {\n      const parsed = JSON.parse(data);\n      return parsed.logs || [];\n    }\n  } catch (error) {\n    console.warn('Failed to load from localStorage:', error);\n  }\n  return [];\n};\n\n// Enhanced API functions\nexport const submitLog = async (logData) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1200));\n  \n  const existingLogs = loadFromStorage();\n  \n  // Generate enhanced AI suggestions\n  const suggestions = generateAISuggestions(\n    logData.task, \n    logData.category, \n    logData.priority, \n    existingLogs\n  );\n  \n  const newLog = {\n    id: Date.now(),\n    ...logData,\n    suggestions,\n    timestamp: new Date().toISOString(),\n    completed: false,\n    timeSpent: logData.timeSpent || null,\n    tags: logData.tags || []\n  };\n  \n  const updatedLogs = [newLog, ...existingLogs];\n  saveToStorage(updatedLogs);\n  \n  return newLog;\n};\n\nexport const getLogs = async () => {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return loadFromStorage();\n};\n\nexport const updateLog = async (logId, updates) => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const logs = loadFromStorage();\n  const updatedLogs = logs.map(log => \n    log.id === logId ? { ...log, ...updates } : log\n  );\n  \n  saveToStorage(updatedLogs);\n  return updatedLogs.find(log => log.id === logId);\n};\n\nexport const deleteLog = async (logId) => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const logs = loadFromStorage();\n  const filteredLogs = logs.filter(log => log.id !== logId);\n  saveToStorage(filteredLogs);\n  \n  return filteredLogs;\n};\n\nexport const getAnalytics = async () => {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  const logs = loadFromStorage();\n  \n  if (logs.length === 0) {\n    return {\n      totalTasks: 0,\n      completedTasks: 0,\n      averageTasksPerDay: 0,\n      productivityTrend: [],\n      categoryDistribution: {},\n      priorityDistribution: {},\n      suggestions: []\n    };\n  }\n  \n  const now = new Date();\n  const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n  const recentLogs = logs.filter(log => new Date(log.timestamp) >= thirtyDaysAgo);\n  \n  const completedTasks = logs.filter(log => log.completed).length;\n  const categoryDistribution = logs.reduce((acc, log) => {\n    acc[log.category] = (acc[log.category] || 0) + 1;\n    return acc;\n  }, {});\n  \n  const priorityDistribution = logs.reduce((acc, log) => {\n    acc[log.priority] = (acc[log.priority] || 0) + 1;\n    return acc;\n  }, {});\n  \n  // Generate productivity insights\n  const insights = [];\n  \n  const highPriorityCompleted = logs.filter(log => log.priority === 'high' && log.completed).length;\n  const highPriorityTotal = logs.filter(log => log.priority === 'high').length;\n  \n  if (highPriorityTotal > 0) {\n    const completion = (highPriorityCompleted / highPriorityTotal) * 100;\n    insights.push({\n      type: completion > 70 ? 'success' : 'warning',\n      title: 'High Priority Completion',\n      content: `You've completed ${completion.toFixed(1)}% of high-priority tasks.`,\n      priority: 'high'\n    });\n  }\n  \n  return {\n    totalTasks: logs.length,\n    completedTasks,\n    averageTasksPerDay: recentLogs.length / 30,\n    categoryDistribution,\n    priorityDistribution,\n    insights,\n    recentActivity: recentLogs.length\n  };\n};\n\n// Export/Import functionality\nexport const exportData = () => {\n  const data = {\n    logs: loadFromStorage(),\n    exportDate: new Date().toISOString(),\n    version: '2.0'\n  };\n  \n  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `devdiary-export-${new Date().toISOString().split('T')[0]}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\n\nexport const importData = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = JSON.parse(e.target.result);\n        if (data.logs && Array.isArray(data.logs)) {\n          saveToStorage(data.logs);\n          resolve(data.logs);\n        } else {\n          reject(new Error('Invalid file format'));\n        }\n      } catch (error) {\n        reject(new Error('Failed to parse file'));\n      }\n    };\n    reader.readAsText(file);\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}